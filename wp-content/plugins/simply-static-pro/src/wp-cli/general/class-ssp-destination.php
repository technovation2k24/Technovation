<?php

namespace simply_static_pro\commands\general;

use simply_static_pro\commands\Update_Command;

class Destination extends Update_Command {

	protected $section = 'general';

	protected $name = 'destination';

	protected $option_name = 'destination_url_type';

	protected $description = 'Update Destination URL.';

	public function get_synopsis() {

		$methods = $this->get_methods();

		$synopsis = [
			array(
				'type'        => 'positional',
				'name'        => 'value',
				'description' => "The value to save as Destination URL.\nAvailable options: \n" . array_reduce( array_keys( $methods ), function ( $carry, $item ) use ( $methods ) {
						return $carry .= '- ' . $item . ' : ' . $methods[ $item ] . "\n";
					} ),
				'optional'    => false,
				'repeating'   => false,
			)
		];

		return array_merge( $synopsis, parent::get_synopsis() ); // TODO: Change the autogenerated stub
	}

	protected function get_methods() {
		return [
			'absolute' => 'Absolute URL',
			'relative' => 'Relative URL',
			'offline'  => 'Offline',
		];
	}

	/**
	 * Run
	 *
	 * @param $args
	 * @param $options
	 *
	 * @return void
	 */
	public function run( $args, $options ) {
		$update_value = $args[0];
		$methods      = $this->get_methods();

		if ( ! isset( $methods[ $update_value ] ) ) {
			\WP_CLI::error( "No such method available. Please choose one of the following: \n" . array_reduce( array_keys( $methods ), function ( $carry, $item ) use ( $methods ) {
					return $carry .= '- ' . $item . ' : ' . $methods[ $item ] . "\n";
				} ) );

			return;
		}

		$this->update( $update_value );

		$this->has_further_steps( $update_value );

		\WP_CLI::success( 'Updated!' );
	}

	public function has_further_steps( $type ) {
		$method_name = str_replace( '-', '_', $type );
		if ( method_exists( $this, $method_name ) ) {
			$this->{$method_name}();
		}
	}

	public function relative() {
		$this->choose_relative();

	}

	public function absolute() {
		$this->choose_scheme();
		$this->choose_host();

	}

	protected function choose_relative() {
		$path = $this->ask( "Please enter a relative path. Example /path/ to be under yoursite.com/path/:" );
		if ( strpos( $path, 'http://' ) === 0 || strpos( $path, 'https://' ) === 0 || $path === '' ) {
			\WP_CLI::line( \WP_CLI::colorize( "%rYou have to enter a relative path, not an absolute URL or an empty path.%n" ) );
			$this->choose_relative();

			return;
		}

		$this->update( $path, 'relative_path' );
	}

	protected function choose_host() {
		$host = $this->ask( "Please enter the URL of the site (without http, https or //):" );
		if ( $host ) {
			$this->update( $host, 'destination_host' );

			return;
		}

		\WP_CLI::line( \WP_CLI::colorize( "%rYou have to enter an URL.%n" ) );
		$this->choose_host();
	}

	protected function choose_scheme() {
		$scheme = $this->ask( "Please enter what scheme will you use: [http or https or //]" );

		switch ( $scheme ) {
			case 'http':
			case 'https':
				$this->update( $scheme . '://', 'destination_scheme' );
				break;
			case '//':
				$this->update( $scheme, 'destination_scheme' );
				break;
			default:
				\WP_CLI::line( \WP_CLI::colorize( "%rIncorrect! You can only enter http, https or //%n" ) );
				$this->choose_scheme();
		}
	}

}